#! /bin/zsh

# The location of the `ex_cldr` repo
export EX_CLDR="$HOME/Development/cldr"
[ ! -d $EX_CLDR ] && { echo "ex_cldr repository $BAK was not found."; exit 1; }

# The location of the cloned CLDR repo
export CLDR_REPO="$HOME/Development/cldr_repo"
[ ! -d $CLDR_REPO ] && { echo "CLDR repository $CLDR_REPO was not found."; exit 1; }

# Location of where the staging data should
# be provisioned
export CLDR_STAGING="$HOME/Development/cldr_staging_data"
[ ! -d $CLDR_STAGING ] && { echo "CLDR staging directory $CLDR_STAGING was not found."; exit 1; }

# Location where the production data will be
# provisioined.
export CLDR_PRODUCTION="$HOME/Development/cldr_production_data"
[ ! -d $CLDR_PRODUCTION ] && { echo "CLDR production directory $CLDR_PRODUCTION was not found."; exit 1; }

# The location of the CLDR utilities jar
# This location is autogenerated and should not need to
# be adjusted
export CLDR_TOOLS="$CLDR_REPO/tools/java/cldr.jar"

cd $CLDR_REPO

# Expand to production data which will go in
# $CLDR_STAGING
java -DCLDR_DIR=$CLDR_REPO \
  -jar $CLDR_TOOLS org.unicode.cldr.tool.GenerateProductionData \
  -s $CLDR_REPO/common \
  -d $CLDR_STAGING/common


# We do this since processing all locales in a single run
# reliably emits all locales (the consolidated
# verison does not). Therefore the working aproach is to
# do the following first

for FULLPATH in $CLDR_REPO/common/main/*.xml; do
  LOCALE=$FULLPATH:t:r
  java -DCLDR_DIR=$CLDR_STAGING \
    -jar $CLDR_TOOLS ldml2json \
    -d $CLDR_PRODUCTION -p true -r true -t main -m $LOCALE
done

# Data will be generated into $CLDR_PRODUCTION
# -Xmx16g may be too much but the default is definitely too small
# and will cause an out of heap memory exception
java -Xmx16g -DCLDR_DIR=$CLDR_STAGING \
  -jar $CLDR_TOOLS ldml2json \
  -d $CLDR_PRODUCTION -p true -r true -t

java -DCLDR_DIR=$CLDR_STAGING \
  -jar $CLDR_TOOLS ldml2json \
  -d $CLDR_PRODUCTION -p true -r true -t supplemental

java -DCLDR_DIR=$CLDR_STAGING \
  -jar $CLDR_TOOLS ldml2json \
  -d $CLDR_PRODUCTION -p true -r true -t rbnf

# Some data we process directly from the XML
cp $CLDR_REPO/common/supplemental/units.xml $CLDR_PRODUCTION
cp $CLDR_REPO/common/supplemental/pluralRanges.xml $CLDR_PRODUCTION/plural_ranges.xml
cp $CLDR_REPO/common/supplemental/subdivisions.xml $CLDR_PRODUCTION
cp $CLDR_REPO/common/bcp47/timezone.xml $CLDR_PRODUCTION/timezones.xml

# ex_cldr additional data required for data generation
cp $EX_CLDR/data/measurement_systems.xml $CLDR_PRODUCTION/measurement_systems.xml
cp $EX_CLDR/data/iso_currencies.xml $CLDR_PRODUCTION/iso_currencies.xml

cd $OLDPWD
